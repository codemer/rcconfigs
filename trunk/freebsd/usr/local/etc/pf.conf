# See pf.conf(5) and /usr/share/pf for syntax and examples.
# Required order: options, normalization, queueing, translation, filtering.
# Macros and tables may be defined and used anywhere.
# Note that translation rules are first match while filter rules are last match.

# Macros: define common values, so they can be referenced and changed easily.
int_if="vr0"
ext_if="fxp0"
# external_add="71.56.227.167"
external_add="71.196.151.179"
internal_net="192.168.1.1/24"

# Tables: similar to macros, but more flexible for many addresses.
#table <foo> { 10.0.0.0/8, !10.1.0.0/16, 192.168.0.0/24, 192.168.1.18 }

# Options: tune the behavior of pf, default values are given.
#set timeout { interval 10, frag 30 }
#set timeout { tcp.first 120, tcp.opening 30, tcp.established 86400 }
#set timeout { tcp.closing 900, tcp.finwait 45, tcp.closed 90 }
#set timeout { udp.first 60, udp.single 30, udp.multiple 60 }
#set timeout { icmp.first 20, icmp.error 10 }
#set timeout { other.first 60, other.single 30, other.multiple 60 }
#set timeout { adaptive.start 0, adaptive.end 0 }
#set limit { states 10000, frags 5000 }
#set loginterface none
set loginterface fxp0
#set optimization normal
#set block-policy drop
#set require-order yes
#set fingerprints "/etc/pf.os"

# Normalization: reassemble fragments and resolve or reduce traffic ambiguities.
scrub in all

# Translation: specify how addresses are to be mapped or redirected.
# nat: packets going out through $ext_if with source address $internal_net will
# get translated as coming from the address of $ext_if, a state is created for
# such packets, and incoming packets will be redirected to the internal address.
nat on $ext_if from $internal_net to any -> ($ext_if)

# rdr: packets coming in on $ext_if with destination $external_addr:1234 will
# be redirected to 10.1.1.1:5678. A state is created for such packets, and
# outgoing packets will be translated as coming from the external address.
#rdr on $ext_if proto tcp from any to $external_addr/32 port 1234 -> 10.1.1.1 port 5678

# redirect external port 2222 to Hawaii:22
#rdr on $ext_if proto tcp from any to $external_addr/32 port 2222 -> 192.168.0.128 port 22

# Forward requests to bit torrent client.
rdr on $ext_if proto tcp from any to any port 9090:9199 -> 192.168.1.2
# Forward requests to xmeeting
rdr on $ext_if proto tcp from any to any port { 1720, 30000:30010 } -> 192.168.1.2

# rdr outgoing FTP requests to the ftp-proxy
rdr on $int_if proto tcp from any to any port 21 -> 127.0.0.1 port 8021

# Set up transparent web proxy (squid)
rdr on $int_if inet proto tcp from any to any port www -> 127.0.0.1 port 3128

# spamd-setup puts addresses to be redirected into table <spamd>.
#table <spamd> persist
#no rdr on { lo0, lo1 } from any to any
#rdr inet proto tcp from <spamd> to any port smtp -> 127.0.0.1 port 8025

# Filtering: the implicit first two rules are
#pass in all
#pass out all

# Drop all spoofed packets on the external interface, but allow loopback device
pass in quick on lo0 all
#antispoof log quick for $ext_if inet

# silently drop broadcasts cable modem noise
block in quick on $ext_if from any to 255.255.255.255

# block and log everything by default
block return log on $ext_if all

# block anything coming from source we have no back routes for
block in from no-route to any

# Block and log outgoing packets that don't have our address as source,
# they are either spoofed or something is misconfigured NAT disabled,
# (for instance), we want to be nice and don't send out garbage.
block out log quick on $ext_if from ! $ext_if to any

pass  in  proto tcp from any to port { 22, 53, 80, 123, 443 } keep state
#pass  in  proto tcp from any to port { 22, 53, 123, 443 } keep state
pass  in  proto tcp from any to port { 2593 } keep state
# Open Rails test port
pass  in  proto tcp from any to port { 3000 } keep state

#
# Restrict internal network traffic
#
pass  in  on $int_if proto { tcp, udp } from any to any port { 20, 21, 22, 25, 43, 70, 79, 110, 458, 554, 873, 990, 995, 2401, 5190, 5191, 5192, 5193 } keep state
#pass  in  on $int_if proto tcp from any to any port > 49151 keep state
pass  in  on $int_if proto tcp from any to any port > 1024 keep state
#pass  in  on $int_if proto tcp from any to any port { 2064, 5999, 8000, 8080, 8081 } keep state
# Port for Stick Arena
#pass  in  on $int_if proto tcp from any to any port { 1138 } keep state
pass  in  on $int_if proto udp from any to any port { 80, 110, 443, 1138 } keep state
# Pass rails test port
#pass  in  on $int_if proto tcp from any to any port { 3000 } keep state
# Cisco VPN
#pass  in  on $int_if proto tcp from any to any port { 10000 } keep state
# Jabber
#pass  in  on $int_if proto tcp from any to any port {5223 } keep state
# Pass Vonage ports 5060-5061, 10000-25000
pass  in  on $int_if proto udp from any to any port { 5060:5061 } keep state
pass  in  on $int_if proto udp from any to any port { 10000:20000 } keep state

# Pass torrent ports
pass  in  on $ext_if proto tcp from any to 192.168.1.2 port 9090:9199 flags S/FSRPAU synproxy state
# Pass xmeeting ports
pass  in  on $ext_if proto tcp from any to 192.168.1.2 port { 1720, 30000:30010 } flags S/FSRPAU synproxy state

# Enable Cisco VPN
pass  in  on $int_if proto tcp from any to any port { 500, 4500, 10000 } keep state

pass  in  on $int_if proto udp from any to any port { 69 } keep state
pass  in  proto udp from any to port { 53, 123 } keep state
pass  in  proto icmp all keep state
pass  out proto { tcp, udp, icmp } all keep state
pass  out proto udp from any to any port > 1024 keep state

# pass incoming packets destined to the addresses given in table <foo>.
#pass in on $ext_if proto { tcp, udp } from any to <foo> port 80 keep state

# pass incoming ports for ftp-proxy
pass in on $ext_if inet proto tcp from any to $ext_if user proxy keep state
pass in on $ext_if proto tcp from any to $ext_if user proxy keep state

# (squid)
pass out on $ext_if inet proto tcp from any to any port www keep state
